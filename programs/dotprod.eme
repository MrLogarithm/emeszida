𒁾
# Vector A: 1-10 in registers 𒐕𒋙𒐕 to 𒌋𒋙𒐕
𒐕				𒈨	𒃻𒋃𒐕𒄰	𒐕
𒐕𒋙𒐕				𒈨	𒃻𒋃𒐖𒄰	𒌋
𒌋				𒈨	𒃻𒋃𒐗𒄰	𒌋
# Flag: have we filled vector B yet?
𒐕				𒈨	𒃻𒋃𒐘𒄰	𒌋
# Loop: populate vector
𒃻𒋃𒐕𒄰			𒈨	𒃻𒋃𒃻𒋃𒐖𒄰𒄰	𒐕𒐕
𒃻𒋃𒐕𒄰𒀀𒈾𒐕			𒈭𒄩	𒃻𒋃𒐕𒄰	𒌋
𒃻𒋃𒐖𒄰𒀀𒈾𒐕			𒈭𒄩	𒃻𒋃𒐖𒄰	𒌋
𒐕𒄿𒈾𒃻𒋃𒐗𒄰			𒁀𒍣	𒃻𒋃𒐗𒄰	𒌋
# If vector is full, GOTO III
𒃻𒋃𒐗𒄰			jz	𒐕𒐕𒐕		𒌋
# Else loop
𒐕𒐕				𒇔𒈾	𒋤		𒌋
---
# If vector B already full, GOTO IIII
𒃻𒋃𒐘𒄰			jz	𒐕𒐕𒐕𒐕	𒐕𒐕𒐕
# Else define vector B: 4-13 in registers 𒐕𒋙𒐖 to 𒌋𒋙𒐖
𒐕𒄿𒈾𒃻𒋃𒐘𒄰			𒁀𒍣	𒃻𒋃𒐘𒄰	𒌋
𒐘				𒈨	𒃻𒋃𒐕𒄰	𒌋
𒐕𒋙𒐖				𒈨	𒃻𒋃𒐖𒄰	𒌋
𒌋				𒈨	𒃻𒋃𒐗𒄰	𒌋
# Goto populate vector
𒐕𒐕				𒇔𒈾	𒋤		𒌋
---
# Call Dot Product
# Set return address in register 𒐕
𒐕𒐕𒐕𒐕𒐕𒐕𒐕			𒈨	𒃻𒋃𒐕𒄰	𒐕𒐕𒐕𒐕
# Pointer to A in register 𒐖
𒐕𒋙𒐕				𒈨	𒃻𒋃𒐖𒄰	𒌋
# Pointer to B in register 𒐗
𒐕𒋙𒐖				𒈨	𒃻𒋃𒐗𒄰	𒌋
# Length in register 𒐘
𒌋				𒈨	𒃻𒋃𒐘𒄰	𒌋
# Length of B in register 𒐙
# 𒌋				𒈨	𒃻𒋃𒐙𒄰	𒌋
# Call Dot Product
𒐕𒐕𒐕𒐕𒐕			𒋫𒈥	𒋤		𒌋
---
# Define Dot Product
# Initialize accumulator to 0 in register 𒋙𒐕
𒐕				𒈨	𒃻𒋃𒋙𒐕𒄰	𒐕𒐕𒐕𒐕𒐕
𒐕𒄿𒈾𒃻𒋃𒋙𒐕𒄰		𒁀𒍣	𒃻𒋃𒋙𒐕𒄰	𒌋
# Compute A[i]*B[i] in register 𒋙𒐖
𒃻𒋃𒃻𒋃𒐖𒄰𒄰  𒃻𒋃𒃻𒋃𒐗𒄰𒄰		𒀀𒁺	𒃻𒋃𒋙𒐖𒄰	𒐕𒐕𒐕𒐕𒐕𒐕
# Add to accumulator
𒃻𒋃𒋙𒐖𒄰𒀀𒈾𒃻𒋃𒋙𒐕𒄰	𒈭𒄩	𒃻𒋃𒋙𒐕𒄰	𒌋
# Decrement length counter
𒐕𒄿𒈾𒃻𒋃𒐘𒄰			𒁀𒍣	𒃻𒋃𒐘𒄰	𒌋
# Increment array pointers
𒃻𒋃𒐖𒄰𒀀𒈾𒐕			𒈭𒄩	𒃻𒋃𒐖𒄰	𒌋
𒃻𒋃𒐗𒄰𒀀𒈾𒐕			𒈭𒄩	𒃻𒋃𒐗𒄰	𒌋
# Return if length counter is zero
𒃻𒋃𒐘𒄰			jz	𒃻𒋃𒐕𒄰	𒌋
# Else loop
𒐕𒐕𒐕𒐕𒐕𒐕			𒇔𒈾	𒋤		𒌋
---
# Print output
𒃻𒋃𒋙𒐕𒄰			𒋫𒈥	𒋤		𒐕𒐕𒐕𒐕𒐕𒐕𒐕
---
colophon
