𒁾
# First, jump to 𒐕 to load parameters into memory:
𒐕												𒇔𒈾	𒋤			𒑱
---
##############
# def matmul()
𒐕												jz	𒋤			𒐕𒐕𒐕𒐕𒐕𒐕
# Counter for rows of A/output, starts at 𒃻𒋃𒐗𒋙𒐗𒄰 = dim 1 of A
𒃻𒋃𒐗𒋙𒐗𒄰											𒈨	𒃻𒋃𒐗𒋙𒌋𒐕𒄰		𒑱
# Counter for cols of B/output, starts at 𒃻𒋃𒐗𒋙𒐙𒄰 = dim 2 of B
𒃻𒋃𒐗𒋙𒐙𒄰											𒈨	𒃻𒋃𒐗𒋙𒌋𒐖𒄰		𒐘𒐘𒐘𒐘
# Compute dot product between current row/column:
#   Counter for position in vector, starts at final entry
𒃻𒋃𒐗𒋙𒐘𒄰											𒈨	𒃻𒋃𒐗𒋙𒌋𒐗𒄰		𒑱
#   Accumulator starts at zero
𒑱												𒈨	𒃻𒋃𒐗𒋙𒌋𒐘𒄰		𒑱
#   Construct address of current elem in A:
#     Start position is in 𒃻𒋃𒐗𒋙𒐕𒄰
#     Row is 𒃻𒋃𒐗𒋙𒌋𒐕𒄰 >> 2 
𒐕𒑱												𒅆	𒃻𒋃𒑱𒋙𒑱𒄰		𒐘
𒃻𒋃𒐗𒋙𒌋𒐕𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐙𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐙𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐙𒄰		𒑱
#     Col is 𒃻𒋃𒐗𒋙𒌋𒐗𒄰  >> 3
𒃻𒋃𒐗𒋙𒌋𒐗𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐚𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐚𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
#     Address is start position plus row plus col
𒃻𒋃𒐗𒋙𒐕𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐙𒄰									𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒐛𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐛𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐚𒄰								𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒐛𒄰		𒑱
#   Construct address of current elem in B
#     Start position is in 𒃻𒋃𒐗𒋙𒐖𒄰
#     Row is 𒃻𒋃𒐗𒋙𒌋𒐗𒄰  >> 2 
𒃻𒋃𒐗𒋙𒌋𒐗𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐜𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐜𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐜𒄰		𒑱
#     Col is 𒃻𒋃𒐗𒋙𒌋𒐖𒄰 >> 3
𒃻𒋃𒐗𒋙𒌋𒐖𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐝𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐝𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐝𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐝𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐝𒄰		𒑱
#     Address is start position plus row plus col
𒃻𒋃𒐗𒋙𒐖𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐜𒄰									𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒌋𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒌋𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐝𒄰								𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒌋𒄰		𒑱
#   Multiply matrix elements
𒃻𒋃𒃻𒋃𒐗𒋙𒌋𒐛𒄰𒄰  𒃻𒋃𒃻𒋃𒐗𒋙𒌋𒌋𒄰𒄰							𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒌋𒐕𒄰	𒑱
#   Add to accumulator
𒃻𒋃𒐗𒋙𒌋𒌋𒐕𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐘𒄰								𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒐘𒄰		𒑱
#   If vector index == 0, break
𒃻𒋃𒐗𒋙𒌋𒐗𒄰											jz	𒐘𒐘			𒑱
#   Else decrement vector index
𒐕𒄿𒈾𒃻𒋃𒐗𒋙𒌋𒐗𒄰										𒁀𒍣	𒃻𒋃𒐗𒋙𒌋𒐗𒄰		𒑱
#   And loop to add next term to accumulator
𒐘												𒇔𒈾	𒋤			𒑱
# End dot product loop
𒐕												jz	𒋤			𒐘𒐘
# Write accumulated value to output matrix:
#   Construct address of current elem:
#     Start position is 𒃻𒋃𒐗𒋙𒎙𒄰
#     Row is 𒃻𒋃𒐗𒋙𒌋𒐕𒄰 >> 2 
𒐕𒑱												𒅆	𒃻𒋃𒑱𒋙𒑱𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐕𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐙𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐙𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐙𒄰		𒑱
#     Col is 𒃻𒋃𒐗𒋙𒌋𒐖𒄰  >> 3
𒃻𒋃𒐗𒋙𒌋𒐖𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐚𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐚𒄰  𒃻𒋃𒑱𒋙𒑱𒄰									𒀀𒁺	𒃻𒋃𒐗𒋙𒌋𒐚𒄰		𒑱
#     Address is start position plus row plus col
𒐗𒋙𒎙𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐙𒄰									𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒐛𒄰		𒑱
𒃻𒋃𒐗𒋙𒌋𒐛𒄰𒀀𒈾𒃻𒋃𒐗𒋙𒌋𒐚𒄰								𒈭𒄩	𒃻𒋃𒐗𒋙𒌋𒐛𒄰		𒑱
#   Write accumulated value to computed destination
𒃻𒋃𒐗𒋙𒌋𒐘𒄰											𒈨	𒃻𒋃𒃻𒋃𒐗𒋙𒌋𒐛𒄰𒄰	𒑱
#
# If row counter == 0, break
𒃻𒋃𒐗𒋙𒌋𒐕𒄰											jz	𒐘𒐘𒐘			𒑱
# Decrement row counter
𒐕𒄿𒈾𒃻𒋃𒐗𒋙𒌋𒐕𒄰										𒁀𒍣	𒃻𒋃𒐗𒋙𒌋𒐕𒄰		𒑱
# Loop back to compute next row of output
𒐘𒐘𒐘𒐘											𒇔𒈾	𒋤			𒑱
#
# NOP placeholder to break out of loop
𒐕												jz	𒋤			𒐘𒐘𒐘
# Return. Output is in register 𒐗𒋙𒎙
𒃻𒋃𒐗𒋙𒑱𒄰											𒇔𒈾	𒋤			𒑱
---
#################
# def run_model()
𒐕												jz	𒋤			𒐕𒐕𒐕𒐕𒐕
#################################################################
# Prepare to call matmul:
#   Put pointer to layer1.weight in matmul.arg1 = 𒃻𒋃𒐗𒋙𒐕𒄰
𒐕𒋙𒑱𒑱𒑱											𒈨	𒃻𒋃𒐗𒋙𒐕𒄰		𒑱
#   Put pointer to input vector in matmul.arg2 = 𒃻𒋃𒐗𒋙𒐖𒄰
𒃻𒋃𒐘𒋙𒐕𒄰											𒈨	𒃻𒋃𒐗𒋙𒐖𒄰		𒑱
#   Put size of layer1.weight in matmul.arg3 and matmul.arg4 (minus 1)
𒐘												𒈨	𒃻𒋃𒐗𒋙𒐗𒄰		𒑱
𒐕												𒈨	𒃻𒋃𒐗𒋙𒐘𒄰		𒑱
#   Put final dimension of input vector into matmul.arg5 (minus 1)
𒑱												𒈨	𒃻𒋃𒐗𒋙𒐙𒄰		𒑱
#   Put 𒐗 into matmul.return_addr = 𒃻𒋃𒐗𒋙𒑱𒄰
𒐗												𒈨	𒃻𒋃𒐗𒋙𒑱𒄰		𒑱
#   Call matmul
𒐕𒐕𒐕𒐕𒐕𒐕											𒇔𒈾	𒋤			𒑱
# NOP placeholder: Return from matmul
𒐕												jz	𒋤			𒐗
#################################################################
# Copy matmul result back to run_model's namespace
#   Put counter for number of elements to copy in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐘												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to destination in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐘											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to source in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐗𒋙𒎙 𒐘											𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Copy source to destination
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰										𒈨	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒐗𒐗
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒐗𒐗𒐗			𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to copy next element
𒐗𒐗												𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒐗𒐗𒐗
#################################################################
# Add bias
#   Put counter for number of elements to add in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐘												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to vector in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐘											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to bias in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐕𒋙𒐕𒐘											𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Add bias to vector
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰𒀀𒈾𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰							𒈭𒄩	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒐗𒐗𒐗𒐗
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒐗𒐗𒐗𒐗𒐗		𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to add next element
𒐗𒐗𒐗𒐗											𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒐗𒐗𒐗𒐗𒐗
#################################################################
# Apply ReLU
#   Put counter for number of elements in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐘												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to vector in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐘											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   If element greater than zero, jump ahead
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰										jgz	𒐗𒐗𒐗𒐗𒐗𒐗𒐗𒐗	𒐗𒐗𒐗𒐗𒐗𒐗
#   Set element to zero
𒑱												𒈨	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒑱
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒐗𒐗𒐗𒐗𒐗𒐗𒐗		𒐗𒐗𒐗𒐗𒐗𒐗𒐗𒐗
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to rectify next element
𒐗𒐗𒐗𒐗𒐗𒐗											𒇔𒈾	𒋤			𒑱
# NOP placeholder to break rectifier loop
𒐕												jz	𒋤			𒐗𒐗𒐗𒐗𒐗𒐗𒐗
#################################################################
# Prepare to call matmul on layer 2:
#   Put pointer to layer2.weight in matmul.arg1 = 𒃻𒋃𒐗𒋙𒐕𒄰
𒐕𒋙𒐖𒑱𒑱											𒈨	𒃻𒋃𒐗𒋙𒐕𒄰		𒑱
#   Put pointer to input vector in matmul.arg2 = 𒃻𒋃𒐗𒋙𒐖𒄰
𒐘𒋙𒎙												𒈨	𒃻𒋃𒐗𒋙𒐖𒄰		𒑱
#   Put size of layer2.weight in matmul.arg3 and matmul.arg4 (minus 1)
𒐖												𒈨	𒃻𒋃𒐗𒋙𒐗𒄰		𒑱
𒐘												𒈨	𒃻𒋃𒐗𒋙𒐘𒄰		𒑱
#   Put final dimension of input vector into matmul.arg5 (minus 1)
𒑱												𒈨	𒃻𒋃𒐗𒋙𒐙𒄰		𒑱
#   Put 𒐗 into matmul.return_addr = 𒃻𒋃𒐗𒋙𒑱𒄰
𒌋𒌋												𒈨	𒃻𒋃𒐗𒋙𒑱𒄰		𒑱
#   Call matmul
𒐕𒐕𒐕𒐕𒐕𒐕											𒇔𒈾	𒋤			𒑱
# NOP placeholder: Return from matmul
𒐕												jz	𒋤			𒌋𒌋
#################################################################
# Copy matmul result back to run_model's namespace
#   Put counter for number of elements to copy in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐖												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to destination in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐖											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to source in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐗𒋙𒎙 𒐖											𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Copy source to destination
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰										𒈨	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒌋𒌋𒌋
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒌋𒌋𒌋𒌋		𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to copy next element
𒌋𒌋𒌋												𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒌋𒌋𒌋𒌋
#################################################################
# Add bias
#   Put counter for number of elements to add in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐖												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to vector in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐖											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to bias in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐕𒋙𒐗𒐖											𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Add bias to vector
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰𒀀𒈾𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰							𒈭𒄩	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒌋𒌋𒌋𒌋𒌋
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒌋𒌋𒌋𒌋𒌋𒌋		𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to add next element
𒌋𒌋𒌋𒌋𒌋											𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒌋𒌋𒌋𒌋𒌋𒌋
#################################################################
# Apply ReLU
#   Put counter for number of elements in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒐖												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to vector in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙 𒐖											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   If element greater than zero, jump ahead
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰										jgz	𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋	𒌋𒌋𒌋𒌋𒌋𒌋𒌋
#   Set element to zero
𒑱												𒈨	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒑱
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋		𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to rectify next element
𒌋𒌋𒌋𒌋𒌋𒌋𒌋											𒇔𒈾	𒋤			𒑱
# NOP placeholder to break rectifier loop
𒐕												jz	𒋤			𒌋𒌋𒌋𒌋𒌋𒌋𒌋𒌋
#################################################################
# Prepare to call matmul:
#   Put pointer to layer3.weight in matmul.arg1 = 𒃻𒋃𒐗𒋙𒐕𒄰
𒐕𒋙𒐘𒑱𒑱											𒈨	𒃻𒋃𒐗𒋙𒐕𒄰		𒑱
#   Put pointer to input vector in matmul.arg2 = 𒃻𒋃𒐗𒋙𒐖𒄰
𒐘𒋙𒎙												𒈨	𒃻𒋃𒐗𒋙𒐖𒄰		𒑱
#   Put size of layer3.weight in matmul.arg3 and matmul.arg4 (minus 1)
𒑱												𒈨	𒃻𒋃𒐗𒋙𒐗𒄰		𒑱
𒐖												𒈨	𒃻𒋃𒐗𒋙𒐘𒄰		𒑱
#   Put final dimension of input vector into matmul.arg5 (minus 1)
𒑱												𒈨	𒃻𒋃𒐗𒋙𒐙𒄰		𒑱
#   Put 𒐗 into matmul.return_addr = 𒃻𒋃𒐗𒋙𒑱𒄰
𒎙												𒈨	𒃻𒋃𒐗𒋙𒑱𒄰		𒑱
#   Call matmul
𒐕𒐕𒐕𒐕𒐕𒐕											𒇔𒈾	𒋤			𒑱
# NOP placeholder: Return from matmul
𒐕												jz	𒋤			𒎙
#################################################################
# Copy matmul result back to run_model's namespace
#   Put counter for number of elements to copy in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒑱												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to destination in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙												𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to source in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐗𒋙𒎙												𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Copy source to destination
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰										𒈨	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒎙𒎙
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒎙𒎙𒎙			𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to copy next element
𒎙𒎙												𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒎙𒎙𒎙
#################################################################
# Add bias
#   Put counter for number of elements to add in 𒃻𒋃𒐘𒋙𒌋𒑱𒄰
𒑱												𒈨	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
#   Put pointer to vector in 𒃻𒋃𒐘𒋙𒌋𒐕𒄰
𒐘𒋙𒎙											𒈨	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
#   Put pointer to bias in 𒃻𒋃𒐘𒋙𒌋𒐖𒄰
𒐕𒋙𒐙											𒈨	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Add bias to vector
𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐖𒄰𒄰𒀀𒈾𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰							𒈭𒄩	𒃻𒋃𒃻𒋃𒐘𒋙𒌋𒐕𒄰𒄰	𒎙𒎙𒎙𒎙
#   If counter == 0, break
𒃻𒋃𒐘𒋙𒌋𒑱𒄰											jz	𒎙𒎙𒎙𒎙𒎙		𒑱
#   Decrement counter and pointers
𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒑱𒄰										𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒑱𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐕𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐕𒄰		𒑱
𒋙𒑱𒐕𒄿𒈾𒃻𒋃𒐘𒋙𒌋𒐖𒄰									𒁀𒍣	𒃻𒋃𒐘𒋙𒌋𒐖𒄰		𒑱
#   Loop to add next element
𒎙𒎙𒎙𒎙											𒇔𒈾	𒋤			𒑱
# NOP placeholder to break loop
𒐕												jz	𒋤			𒎙𒎙𒎙𒎙𒎙
# Un-normalize output
#   output *= std
𒃻𒋃𒐘𒋙𒎙𒄰  𒑱𒋙𒌋𒐛 𒐐𒐗 𒌍𒐝 𒐗 𒌍𒐛 𒌋𒐖 𒐐𒐙 𒌍 𒐖 𒎙𒐕 𒐏𒐖 𒐙 𒌍 𒎙𒐗 𒌍𒐚 𒐐𒐛 𒌍𒐚	𒀀𒁺	𒃻𒋃𒐘𒋙𒎙𒄰	𒑱
#   output *= mean
𒃻𒋃𒐘𒋙𒎙𒄰𒀀𒈾𒐕𒋙𒎙 𒐘 𒎙𒐘 𒐚 𒑱 𒐏𒐚 𒎙𒐜 𒎙 𒌍𒐚 𒐖 𒐐𒐘 𒐏𒐘 𒐛 𒌋𒐛 𒐏𒐙 𒌍𒐚	𒈭𒄩	𒃻𒋃𒐘𒋙𒎙𒄰	𒑱
# Return address was provided in 𒃻𒋃𒐘𒋙𒑱𒄰
𒃻𒋃𒐘𒋙𒑱𒄰											𒇔𒈾	𒋤			𒑱
---
# main()
# Get a pointer to the first input pair, which is stored in 𒃻𒋃𒐕𒋙𒐚𒑱𒄰 and 𒃻𒋃𒐕𒋙𒐚𒐕𒄰
𒐕𒋙𒐚𒑱											𒈨	𒃻𒋃𒑱𒋙𒐕𒄰		𒐕𒐕
# Prepare to call run_model:
#   Put pointer to current input pair into run_model.arg1 = 𒃻𒋃𒐘𒋙𒐕𒄰
𒃻𒋃𒑱𒋙𒐕𒄰											𒈨	𒃻𒋃𒐘𒋙𒐕𒄰		𒐖𒐖
#   Put 𒐖 into run_model.return_addr = 𒃻𒋃𒐘𒋙𒑱𒄰
𒐖												𒈨	𒃻𒋃𒐘𒋙𒑱𒄰		𒑱
#   Call run_model
𒐕𒐕𒐕𒐕𒐕											𒇔𒈾	𒋤			𒑱
# Return from run_model
𒐕												jz	𒋤			𒐖
# Print run_model() return value, which is in 𒃻𒋃𒐘𒋙𒎙𒄰
𒃻𒋃𒐘𒋙𒎙𒄰											𒋫𒈥	𒋤			𒑱
# Check if pointer is equal to the last input
𒃻𒋃𒑱𒋙𒐕𒄰𒄿𒈾𒐕𒋙𒐛𒑱									𒁀𒍣	𒃻𒋃𒑱𒋙𒐖𒄰		𒑱
# If it is, goto end of file
𒃻𒋃𒑱𒋙𒐖𒄰											jz	𒌋			𒑱
# Else increment pointer to next input pair
𒑱𒋙𒐕𒀀𒈾𒃻𒋃𒑱𒋙𒐕𒄰										𒈭𒄩	𒃻𒋃𒑱𒋙𒐕𒄰		𒑱
# Loop back to 𒐖𒐖
𒐖𒐖												𒇔𒈾	𒋤			𒑱
---
# Load model parameters
𒐕												jz	𒋤			𒐕
# Register allocation conventions: 
# 0;...: scratch
# 1;...: data
# 2;...: ReLU
# 3;...: matmul
# 4;...: run_model
# 5x2 weight in 1;0,0,0 - 1;0,4,1
𒐕		𒈨	𒃻𒋃𒐕𒋙𒑱𒑱𒑱𒄰	𒑱
𒐖		𒈨	𒃻𒋃𒐕𒋙𒑱𒐕𒑱𒄰	𒑱
𒐗		𒈨	𒃻𒋃𒐕𒋙𒑱𒐖𒑱𒄰	𒑱
𒐖		𒈨	𒃻𒋃𒐕𒋙𒑱𒐗𒑱𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒑱𒐘𒑱𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒑱𒑱𒐕𒄰	𒑱
𒐘		𒈨	𒃻𒋃𒐕𒋙𒑱𒐕𒐕𒄰	𒑱
𒐘		𒈨	𒃻𒋃𒐕𒋙𒑱𒐖𒐕𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒑱𒐗𒐕𒄰	𒑱
𒐘		𒈨	𒃻𒋃𒐕𒋙𒑱𒐘𒐕𒄰	𒑱
# 5x1 bias in   1;1,0 - 1;1,4
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐕𒑱𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐕𒐕𒄰	𒑱
𒐖		𒈨	𒃻𒋃𒐕𒋙𒐕𒐖𒄰	𒑱
𒐗		𒈨	𒃻𒋃𒐕𒋙𒐕𒐗𒄰	𒑱
𒐘		𒈨	𒃻𒋃𒐕𒋙𒐕𒐘𒄰	𒑱
# 3x5 weight in 1;2,0,0 - 1;2,5,2
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒑱𒑱𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒐕𒑱𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒐖𒑱𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒑱𒐕𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒐕𒐕𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒐖𒐕𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒑱𒐖𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒐕𒐖𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒐖𒐖𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒑱𒐗𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒐕𒐗𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒐖𒐗𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒑱𒐘𒄰	𒑱
𒑱		𒈨	𒃻𒋃𒐕𒋙𒐖𒐕𒐘𒄰	𒑱
𒐕		𒈨	𒃻𒋃𒐕𒋙𒐖𒐖𒐘𒄰	𒑱
# 3x1 bias in   1;3,0 - 1;3,2
𒎙𒄿𒈾𒑱	𒁀𒍣	𒃻𒋃𒐕𒋙𒐗𒑱𒄰	𒑱
𒎙𒄿𒈾𒑱	𒁀𒍣	𒃻𒋃𒐕𒋙𒐗𒐕𒄰	𒑱
𒎙𒄿𒈾𒑱	𒁀𒍣	𒃻𒋃𒐕𒋙𒐗𒐖𒄰	𒑱
# 1x3 weight in 1;4,0,0 - 1;4,0,2
𒐕	𒈨	𒃻𒋃𒐕𒋙𒐘𒑱𒑱𒄰	𒑱
𒐕	𒈨	𒃻𒋃𒐕𒋙𒐘𒑱𒐕𒄰	𒑱
𒐕	𒈨	𒃻𒋃𒐕𒋙𒐘𒑱𒐖𒄰	𒑱
# 1x1 bias in   1;5,0
𒎙𒄿𒈾𒑱	𒁀𒍣	𒃻𒋃𒐕𒋙𒐙𒑱𒄰	𒑱
---
# Load model inputs
# input pair 1 in 1;6,0 and 1;6,1
𒐚𒄿𒈾𒑱											𒁀𒍣	𒃻𒋃𒐕𒋙𒐚𒑱𒄰	𒑱
𒐖												𒈨	𒃻𒋃𒐕𒋙𒐚𒐕𒄰	𒑱
# input pair 2 in 1;7,0 and 1;7,1
𒐚												𒁀𒍣	𒃻𒋃𒐕𒋙𒐛𒑱𒄰	𒑱
𒐕												𒈨	𒃻𒋃𒐕𒋙𒐛𒐕𒄰	𒑱
---
# After data is loaded, jump to main():
𒐕𒐕												𒇔𒈾	𒋤			𒑱
---
# END OF FILE
𒐕												jz	𒋤			𒌋
---
colophon
